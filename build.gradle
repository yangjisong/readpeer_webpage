
apply plugin: 'java' 
apply plugin: 'war' 
//apply plugin: 'jetty' 
apply plugin: 'eclipse-wtp'


sourceCompatibility = 1.8   // 设置 JDK 版本
//webAppDirName = 'webapp'    // 设置 WebApp 根目录
sourceSets.main.java.srcDir 'src/main/java'   // 设置 Java 源码所在目录

def saveLibDir="${rootProject.projectDir}/build/lib"

buildscript {
  repositories {
    jcenter()
    // enable this to use snapshot versions of Gretty:
    // maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
  }

  dependencies {
    classpath 'org.akhikhl.gretty:gretty:+'
  }
}


apply plugin: 'org.akhikhl.gretty'

gretty {
    httpPort = 8080
    debugPort = httpPort + 1
    servicePort = httpPort + 2
    statusPort = httpPort + 3
    httpsPort = httpPort + 4
    httpsEnabled = true
    contextPath = '/'
    jvmArgs = ['-Xmx1024M', '-Xms256M']
    servletContainer = 'jetty9'
    scanInterval = 0
    inplaceMode = 'hard'
    debugSuspend = true
  }
  

war {
    baseName = 'readpeer'
    version =  '0.1.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/libs-release" }
}
ext {
    springVersion = "4.0.6.RELEASE"
    emailNotification = "jisong.yang@gmail.com"
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    
    compile("org.springframework:spring-context:${springVersion}")
    compile("org.springframework:spring-context-support:${springVersion}")
    compile("org.springframework:spring-webmvc:${springVersion}")
    compile("org.springframework:spring-jdbc:${springVersion}")
    compile("org.springframework.security:spring-security-web:3.2.5.RELEASE")
    compile("org.springframework.data:spring-data-mongodb:1.6.0.RELEASE")

    compile("org.springframework.data:spring-data-redis:1.4.1.RELEASE")
    compile("org.springframework.mobile:spring-mobile-device:1.1.5.RELEASE")
    compile("org.mybatis:mybatis:3.2.7")
    
    compile("org.codehaus.jackson:jackson-mapper-asl:1.9.12")
    compile("mysql:mysql-connector-java:5.1.31")
    testCompile("junit:junit")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}
//gradle -Pmain=com.readpeer.util.urlParse.Test runMain 
task runMain(type: JavaExec, dependsOn: 'classes'){ //, dependsOn: 'classes'
   if(project.hasProperty('main')){
   		classpath = sourceSets.main.runtimeClasspath
   		main = "${project.getProperty('main')}"
   		println "main execute over"
   }else{
   		println " build."
   }
}